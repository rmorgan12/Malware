# Imports
from numpy import zeros, linspace
import numpy as np
import matplotlib.pyplot as plt
import math

# --------------------------------------------------------------------------------------
# Parameters/Variables
b = .8  # MALWARE INITAL POPOGATION RATE
e = 1
y = .5  # infected
ol = .46  # vaccination rate
w = .05  # loss of immunity
o = .6  # quarantined
g = .2
r = 5

# --------------------------------------------------------------------------------------
# Define the time vector
t_max = 30
dt = 1/30
sd_list = [0, .1, .2, .3]

# --------------------------------------------------------------------------------------
# Susceptible (S), infected (I), quarantined (Q), vaccinated (V), and delay hosts (D)
t = np.arange(0, t_max, dt)
S = zeros(len(t))
I = zeros(len(t))
Q = zeros(len(t))
V = zeros(len(t))
D = zeros(len(t))

# --------------------------------------------------------------------------------------
# Initial conditions
S0 = 30
I0 = 3
Q0 = 0
V0 = 0
D0 = 0

S[0] = S0
I[0] = I0
Q[0] = Q0
V[0] = V0
D[0] = D0
paths = []
np.random.seed(8)
# --------------------------------------------------------------------------------------
# Eulers
for sd in sd_list:
    S = np.zeros(len(t))
    I = np.zeros(len(t))
    Q = np.zeros(len(t))
    V = np.zeros(len(t))
    D = np.zeros(len(t))
    S[0] = S0
    I[0] = I0
    Q[0] = Q0
    V[0] = V0
    D[0] = D0
    for i in range(1, len(t)):
        ns = np.random.normal(0, 1)
        ni = np.random.normal(0, 1)
        nq = np.random.normal(0, 1)
        nv = np.random.normal(0, 1)
        nd = np.random.normal(0, 1)

        # Beta Fxn
        bf = b/(1+e*I[i-1])

        # S
        sdt = (-bf*I[i-1]*S[i-1]-ol*S[i-1]+w*V[((i-1)-r*30)]) * \
            dt + sd*np.sqrt(dt)*ns * \
            S[i-1] + (sd/2) * S[i-1]*((ns**2)-1)*dt

        # I
        idt = (bf*I[i-1]*S[i-1]-(y+g)*I[i-1])*dt + sd * \
            np.sqrt(dt)*ni * \
            I[i-1] + (sd/2) * I[i-1]*((ni**2)-1)*dt

        # Q
        qdt = (g*I[i-1]-o*Q[i-1])*dt + sd * \
            np.sqrt(dt)*nq * \
            Q[i-1] + (sd/2) * Q[i-1]*((nq**2)-1)*dt

        # V
        vdt = (ol*S[i-1]+y*I[i-1]+o*Q[i-1]-w*V[i-1])*dt + \
            sd*np.sqrt(dt)*nv * \
            V[i-1] + (sd/2) * V[i-1]*((nv**2)-1)*dt

        # D
        ddt = (w*V[i-1]-w*V[((i-1)-r*30)])*dt + sd * \
            np.sqrt(dt)*nd * \
            D[i-1] + (sd/2) * D[i-1]*((nd**2)-1)*dt

        S[i] = S[i-1] + sdt
        I[i] = I[i-1] + idt
        Q[i] = Q[i-1] + qdt
        V[i] = V[i-1] + vdt
        D[i] = D[i-1] + ddt
    paths.append(S)

# --------------------------------------------------------------------------------------
# count = -1
# for path in paths:
#     count += 1
#     sigma = "Sigma = " + str(sd_list[count])
#     plt.plot(t, path, label=sigma)
#     plt.xlabel("Time Units")
#     plt.ylabel("Number of Nodes")
#     plt.legend()
#     # plt.title("Modeling Vaccinated Nodes")
# plt.show()

# Plot the results
fig, ax = plt.subplots()
ax.plot(t, S, label='Susceptible')
ax.plot(t, I, label='Infected')
ax.plot(t, Q, label='Quarantined')
ax.plot(t, V, label='Vaccinated')
ax.plot(t, D, label='Delay Hosts')
ax.set_xlabel('Time Units')
ax.set_ylabel('Number of Nodes')
# ax.set_title('Modeling Malware Stages with Stochasticity')
ax.legend()
plt.show()
