import numpy as np 
import matplotlib.pyplot as plt
import math 


def simulate(beta0, o, Q, a, P, mu):
    F = 1         #PARAMETER FOR INFECTION RATE (6)
    alpha = .2    #MACHINE UNAVAIBILITY RATE CAUSED BY MALWARE
    c = 5         #PARAMETER FOR RECOVERED RATE (7) 
    m = 1         #PARAMETER TO CONTROL TIME
    total_pop = 33
    t = np.arange(0, 35, 1/35)
    S = np.zeros(len(t))
    E = np.zeros(len(t))
    I = np.zeros(len(t))
    R = np.zeros(len(t))
    N = np.zeros(len(t))

    #Initial conditions
    S[0] = 30
    E[0] = 2
    I[0] = 1
    R[0] = 0
    N[0] = total_pop
    k = .1
    #Eulers
    for i in range(1, len(t)):

        BETAFUNCTION = beta0/(1+F*I[i-1])                           #INFECTION RATE
        WFUNCTION = abs(math.exp(-a*t[i-1]) * math.cos((2*math.pi*t[i-1])/m)) #LOSS OF IMMUNITY RATE
        YFUNCTION = math.tanh(I[i-1] / c)                           #RECOVERY RATE

        sdt = (P * total_pop - BETAFUNCTION * I[i-1] * S[i-1] + WFUNCTION * R[i-1] - (mu + Q) * S[i-1])     *dt + k * np.sqrt(dt) * np.random.normal(0,1) * S[i-1]
        edt = (BETAFUNCTION * I[i-1] * S[i-1] - o * E[i-1] - mu * E[i-1])                                   *dt + k * np.sqrt(dt) * np.random.normal(0,1) * S[i-1]
        idt = (o * E[i-1] - YFUNCTION * I[i-1] - (mu + alpha) * I[i-1])                                     *dt + k * np.sqrt(dt) * np.random.normal(0,1) * S[i-1]
        rdt = ((1 - P) * total_pop + YFUNCTION * I[i-1] - WFUNCTION * R[i-1] - mu * R[i-1] + Q * S[i-1])    *dt + k * np.sqrt(dt) * np.random.normal(0,1) * S[i-1]

        S[i] = S[i-1] + sdt
        E[i] = E[i-1] + edt
        I[i] = I[i-1] + idt
        R[i] = R[i-1] + rdt
        N[i] = S[i] + E[i] + I[i] + R[i]
    
    return S, E, I, R, N

# define time array
dt = 1/35
t_end = 35
t = np.arange(0, t_end+dt, dt)

# define ranges for input parameters
beta0_range = np.linspace(0, 1, 11)
o_range = np.linspace(0, 1, 11)
Q_range = np.linspace(0, 1, 11)
a_range = np.linspace(0, 1, 11)
P_range = np.linspace(0, 1, 11)
mu_range = np.linspace(0, 1, 11)

# initialize results arrays
# S_results_all = np.zeros((len(beta0_range)))


#Parameter ranges for Monte Carlo simulation
beta0_range = np.linspace(0, 1, 11)
o_range = np.linspace(0, 1, 11)
Q_range = np.linspace(0, 1, 11)
a_range = np.linspace(0, 1, 11)
P_range = np.linspace(0, 1, 11)
mu_range = np.linspace(0, 1, 11)

#Number of simulations to run
num_simulations = 100

#Arrays to store simulation results
# S_results = np.zeros((num_simulations, len(beta0_range), len(o_range), len(Q_range), len(a_range), len(P_range), len(mu_range)))
# E_results = np.zeros((num_simulations, len(beta0_range), len(o_range), len(Q_range), len(a_range), len(P_range), len(mu_range)))
# I_results = np.zeros((num_simulations, len(beta0_range), len(o_range), len(Q_range), len(a_range), len(P_range), len(mu_range)))
# R_results = np.zeros((num_simulations, len(beta0_range), len(o_range), len(Q_range), len(a_range), len(P_range), len(mu_range)))


# Define parameter ranges to test
beta0_range = np.linspace(0, 1, num=11)
o_range = np.linspace(0, 1, num=11)
Q_range = np.linspace(0, 1, num=11)
a_range = np.linspace(0, 1, num=11)
P_range = np.linspace(0, 1, num=11)
mu_range = np.linspace(0, 1, num=11)

# Create empty arrays to store the simulation results
S_results_all = np.zeros((len(beta0_range), len(o_range), len(Q_range), len(a_range), len(P_range), len(mu_range), len(t)))
E_results_all = np.zeros((len(beta0_range), len(o_range), len(Q_range), len(a_range), len(P_range), len(mu_range), len(t)))
I_results_all = np.zeros((len(beta0_range), len(o_range), len(Q_range), len(a_range), len(P_range), len(mu_range), len(t)))
R_results_all = np.zeros((len(beta0_range), len(o_range), len(Q_range), len(a_range), len(P_range), len(mu_range), len(t)))

# Run Monte Carlo simulations for all combinations of parameter values
for i, beta0 in enumerate(beta0_range):
    for j, o in enumerate(o_range):
        for k, Q in enumerate(Q_range):
            for l, a in enumerate(a_range):
                for m, P in enumerate(P_range):
                    for n, mu in enumerate(mu_range):
                        results = simulate(beta0=beta0, o=o, Q=Q, a=a, P=P, mu=mu)
                        S_results_all[i,j,k,l,m,n,:] = results['S']
                        E_results_all[i,j,k,l,m,n,:] = results['E']
                        I_results_all[i,j,k,l,m,n,:] = results['I']
                        R_results_all[i,j,k,l,m,n,:] = results['R']

# Plot the results for a single run
fig, ax = plt.subplots(figsize=(10,6))
ax.plot(t, I_results_all[5,5,5,5,5,5,:], label='Simulation')
ax.set_xlabel('Time (days)')
ax.set_ylabel('Number of infected machines')
ax.set_title('Simulation with default parameter values')
plt.show()
