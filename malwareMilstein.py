from numpy import zeros, linspace
import numpy as np 
import matplotlib.pyplot as plt
import math 

PLOT_ALL_COMPARTMENTS = True
USE_RANDOM_PARAMETERS = False
USE_MONTE_CARLO = False

beta0_vals = np.linspace(0, 1, 8)
o_vals = np.linspace(0, 1, 8)
Q_vals = np.linspace(0, 1, 8)
a_vals = np.linspace(0, 1, 8)
P_vals = np.linspace(0, 1, 8)
mu_vals = np.linspace(0, 1, 8)

beta0 = .2   #MALWARE INITAL POPOGATION RATE 
F = 1         #PARAMETER FOR INFECTION RATE (6)
mu = .1       #MACHINE UNAVAIBILITY RATE CAUSED BY OTHER
alpha = .2    #MACHINE UNAVAIBILITY RATE CAUSED BY MALWARE
c = 5         #PARAMETER FOR RECOVERED RATE (7) 
o = .9        #MALWARE EXECUTION RATE  
Q = .46       #IMMUNIZATION RATE  
P = .1        #BIRTH SUSCEPTIBILITY RATE  
A = 1         #NUMBER OF NEW NODES
a = .1        #PARAMETER TO CONTROL STRENGTH
m = 1         #PARAMETER TO CONTROL TIME

dt = 1/30
total_pop = 33
t = np.arange(0, 30, dt)
S = zeros(len(t))
E = zeros(len(t))
I = zeros(len(t))
R = zeros(len(t))
N = zeros(len(t))


if USE_RANDOM_PARAMETERS == True:
    beta0 = np.random.choice(beta0_vals)
    o = np.random.choice(o_vals)
    Q = np.random.choice(Q_vals)
    a = np.random.choice(a_vals)
    P = np.random.choice(P_vals)
    mu = np.random.choice(mu_vals)


betaValues = []
oValues = []
QValues = []
aValues = []
PValues = []
muValues = []


#Initial conditions
S[0] = 30
E[0] = 2
I[0] = 1
R[0] = 0
N[0] = total_pop

k = .7
if USE_MONTE_CARLO == True:
    num_sims = 4
    for i in range(num_sims):
        for i in range(1, len(t)):

            BETA_FUNCTION = beta0/(1+F*I[i-1])                                 #INFECTION RATE
            W_FUNCTION = abs(math.exp(-a*t[i]) * math.cos((2*math.pi*t[i])/m)) #LOSS OF IMMUNITY RATE
            Y_FUNCTION = math.tanh(I[i-1] / c)                                 #RECOVERY RATE

            sdt = (P * A - (BETA_FUNCTION * I[i-1] * S[i-1]) + W_FUNCTION * R[i-1] - (mu + Q) * S[i-1]) * dt     
            edt = (BETA_FUNCTION * I[i-1] * S[i-1] - o * E[i-1] - mu * E[i-1]) * dt                              
            idt = (o * E[i-1] - Y_FUNCTION * I[i-1] - (mu + a) * I[i-1]) * dt                                    
            rdt = ((1 - P) * A + Y_FUNCTION * I[i-1] - W_FUNCTION * R[i-1] - mu * R[i-1] + Q * S[i-1]) * dt      

            sMil = .1 * np.sqrt(dt) * np.random.normal(0,1) * S[i-1] + (.1/2) * S[i-1] * ((np.random.normal(0,1)**2)-1) * dt
            eMil = .1 * np.sqrt(dt) * np.random.normal(0,1) * E[i-1] + (.1/2) * E[i-1] * ((np.random.normal(0,1)**2)-1) * dt
            iMil = .1 * np.sqrt(dt) * np.random.normal(0,1) * I[i-1] + (.1/2) * I[i-1] * ((np.random.normal(0,1)**2)-1) * dt
            rMil = .1 * np.sqrt(dt) * np.random.normal(0,1) * R[i-1] + (.1/2) * R[i-1] * ((np.random.normal(0,1)**2)-1) * dt

            S[i] = S[i-1] + sdt + sMil
            E[i] = E[i-1] + edt + eMil
            I[i] = I[i-1] + idt + iMil
            R[i] = R[i-1] + rdt + rMil
            N[i] = S[i] + E[i] + I[i] + R[i]

        fig = plt.figure()
        xlabel = plt.xlabel('Time in Units')
        ylabel = plt.ylabel('Number of Nodes')

        if PLOT_ALL_COMPARTMENTS == True:
            l1 = plt.plot(t, S, color='blue', label='Susceptible')
            l2 = plt.plot(t, E, color='red', label='Infected')
            l3 = plt.plot(t, I, color='orange', label='Exposed')
            l4 = plt.plot(t, R, color='purple', label='Recovered')
            legend = plt.legend()
        else: 
            l1 = plt.plot(t, E)
        plt.show()

else: 
    for i in range(1, len(t)):

        BETA_FUNCTION = beta0/(1+F*I[i-1])                                 #INFECTION RATE
        W_FUNCTION = abs(math.exp(-a*t[i]) * math.cos((2*math.pi*t[i])/m)) #LOSS OF IMMUNITY RATE
        Y_FUNCTION = math.tanh(I[i-1] / c)                                 #RECOVERY RATE

        sdt = (P * A - (BETA_FUNCTION * I[i-1] * S[i-1]) + W_FUNCTION * R[i-1] - (mu + Q) * S[i-1]) * dt   
        edt = (BETA_FUNCTION * I[i-1] * S[i-1] - o * E[i-1] - mu * E[i-1]) * dt                            
        idt = (o * E[i-1] - Y_FUNCTION * I[i-1] - (mu + a) * I[i-1]) * dt                                  
        rdt = ((1 - P) * A + Y_FUNCTION * I[i-1] - W_FUNCTION * R[i-1] - mu * R[i-1] + Q * S[i-1]) * dt    

        sMil = 0.5 * k * (np.random.normal(0,1) * dt) * S[i-1]
        eMil = 0.5 * k * (np.random.normal(0,1) * dt) * E[i-1]
        iMil = 0.5 * k * (np.random.normal(0,1) * dt) * I[i-1]
        rMil = 0.5 * k * (np.random.normal(0,1) * dt) * R[i-1]

        S[i] = S[i-1] + sdt + sMil
        E[i] = E[i-1] + edt + eMil
        I[i] = I[i-1] + idt + iMil
        R[i] = R[i-1] + rdt + rMil
        N[i] = S[i] + E[i] + I[i] + R[i]

    fig = plt.figure()
    xlabel = plt.xlabel('Time Units')
    ylabel = plt.ylabel('Number of Nodes')
    title = plt.title('')

if PLOT_ALL_COMPARTMENTS == True:
    l1 = plt.plot(t, S, color='blue', label='Susceptible')
    l2 = plt.plot(t, E, color='red', label='Infected')
    l3 = plt.plot(t, I, color='orange', label='Exposed')
    l4 = plt.plot(t, R, color='purple', label='Recovered')
    legend = plt.legend()
else: 
    l1 = plt.plot(t, S)



plt.show()
